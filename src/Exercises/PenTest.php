<?php
namespace Exercises;

use Fhooe\NormForm\Core\AbstractNormForm;
use Fhooe\NormForm\Parameter\GenericParameter;
use Fhooe\NormForm\Parameter\PostParameter;
use Fhooe\NormForm\View\View;
use DBAccess\DBAccess;
use Utilities\Utilities;

/*
 * Die PENTest-Klasse dient zum ausprobieren von SQL-Injection und persistentem XSS.
 *
 * Die Klasse ist final, da es keinen Sinn macht, davon noch weitere Klassen abzuleiten.
 *
 * @author Martin Harrer <martin.harrer@fh-hagenberg.at>
 * @package Onlineshop
 * @version 2018
 */
final class PenTest extends AbstractNormForm
{
    /**
     * Constants for a HTML attribute in <input name='ptype' id='ptype' ... >, <label for='ptype' ... >
     * --> $_POST[self::PTYPE]
     */
    const EMAIL = "email";
    const PASSWORD = "password";
    const PENTEST = "pentest";

    /**
     * @var string $dbAccess  Database handler for access to database
     */
    private $dbAccess;

    /**
     * PENTest Constructor.
     *
     * Calls constructor of class AbstractNormForm.
     * Creates a database handler for the database connection.
     * The assigned constants can be found in src/defines.inc.php
     *
     * @param View $defaultView Holds the initial @View object used for displaying the form.
     *
     * @throws DatabaseException is thrown by all methods of $this->dbAccess and not treated here.
     *         The exception is treated in the try-catch block of the php script, that initializes this class.
     */
    public function __construct(View $defaultView)
    {
        parent::__construct($defaultView);
        $this->dbAccess = new DBAccess(DSN, DB_USER, DB_PWD, DB_NAMES, DB_COLLATION);
        $this->currentView->setParameter(new GenericParameter("pageArray", $this->fillpageArray()));
    }

    /**
     * Validates the user input
     *
     * Pflichtfelder email, password
     * Die Kombination email + password wird gegen die Datenbank geprüft @see Login::authenitcateUser()
     * Fehlermeldungen werden im Array $errorMessages[] gesammelt.
     *
     * Abstract methods of the class AbstractNormform have to be implemented in the derived class.
     *
     * @return bool true, if $errorMessages is empty, else false
     */
    protected function isValid(): bool
    {
        //TODO Improve this code in a way that makes persistent XSS and SQL-Injection impossible
        $this->currentView->setParameter(new GenericParameter("errorMessages", $this->errorMessages));
        return (count($this->errorMessages) === 0);
    }

    /**
     * Process the user input, sent with a POST request
     *
     * Abstract methods of the class AbstractNormform have to be implemented in the derived class.
     *
     * @throws DatabaseException is thrown by all methods of $this->dbAccess and not treated here.
     *         The exception is treated in the try-catch block of the php script, that initializes this class.
     */
    protected function business(): void
    {
        if (isset($_POST[self::PENTEST])) {
            $this->addPENtestRow();
            $this->statusMessage = "Product Category added";
            $this->currentView->setParameter(new GenericParameter("statusMessage", $this->statusMessage));
            $this->currentView->setParameter(new GenericParameter("pageArray", $this->fillpageArray()));
            $this->currentView->setParameter(new PostParameter(PENTest::PENTEST, true));
        } else {
            $this->authenticateUser();
            // stay on site for demonstration purpose --> do nothing
        }
    }

    /**
     * Validiert email und password
     *
     * Versuchen sie ein Statement zu schreiben, das sich angreifen lässt und stellen sie es dann so um,
     * dass der Angriff nicht mehr funktioniert.
     *
     * @return bool true, wenn email+password einem Datensatz in onlineshop.user entsprechen. false,
     * wenn das nicht der Fall ist.
     * @throws DatabaseException is thrown by all methods of $this->dbAccess and not treated here.
     *         The exception is treated in the try-catch block of the php script, that initializes this class.
     */
    private function authenticateUser()
    {
        //TODO Improve this code in a way that makes XSS and SQL-Injection impossible
        $email=$_POST[self::EMAIL];
        $password=$_POST[self::PASSWORD];
        $query = <<<SQL
                 SELECT idpentest, pentest_varchar2 
                 FROM pentest 
                 WHERE pentest_varchar1='$email' 
                 AND pentest_varchar2='$password'
SQL;
        $this->dbAccess->prepareQuery($query);
        $this->dbAccess->executeStmt();
        $rows = $this->dbAccess->fetchResultset();
        if (count($rows) >= 0) {
            $_SESSION['iduser']=1;
            $_SESSION[IS_LOGGED_IN] = Utilities::generateLoginHash();
            $_SESSION['first_name']="John";
            $_SESSION['last_name']="Doe";
            $this->statusMessage = "Your are logged in successfully";
            $this->currentView->setParameter(new GenericParameter("statusMessage", $this->statusMessage));
            return true;
        } else {
            $this->statusMessage = "Your are not logged in";
            $this->currentView->setParameter(new GenericParameter("statusMessage", $this->statusMessage));
            return false;
        }
    }

    /**
     * Befüllt das Array um alle Produktkategorien aufzulisten, die auf der aktuellen Seite angezeigt werden.
     *
     * Versuchen sie ein Statement zu schreiben, das sich angreifen lässt und stellen sie es dann so um,
     * dass der Angriff nicht mehr funktioniert.
     *
     * @throws DatabaseException is thrown by all methods of $this->dbAccess and not treated here.
     *         The exception is treated in the try-catch block of the php script, that initializes this class.
     */
    private function fillpageArray()
    {
        isset($_POST[self::PENTEST]) ? $pentest=$_POST[self::PENTEST] : $pentest=1;
        $query = <<<SQL
                 SELECT idpentest, pentest_varchar1, pentest_varchar2, pentest_int, pentest_decimal 
                 FROM pentest 
                 WHERE idpentest = '$pentest'
SQL;
        $this->dbAccess->prepareQuery($query);
        $this->dbAccess->executeStmt();
        return $this->dbAccess->fetchResultset();
    }

    /**
     * Versuchen sie ein Statement zu schreiben, das sich angreifen lässt und stellen sie es dann so um,
     * dass der Angriff nicht mehr funktioniert.
     *
     * @throws DatabaseException is thrown by all methods of $this->dbAccess and not treated here.
     *         The exception is treated in the try-catch block of the php script, that initializes this class.
     */
    private function addPENtestRow()
    {
        $pentest=$_POST[self::PENTEST];
        $query = <<<SQL
                 INSERT INTO pentest SET pentest_varchar1 = '$pentest'
SQL;
        $this->dbAccess->prepareQuery($query);
        $this->dbAccess->executeStmt();
    }
}
