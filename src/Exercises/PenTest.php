<?php
namespace Exercises;

use Fhooe\NormForm\Core\AbstractNormForm;
use Fhooe\NormForm\Parameter\GenericParameter;
use Fhooe\NormForm\Parameter\PostParameter;
use Fhooe\NormForm\View\View;
use DBAccess\DBAccess;
use Utilities\Utilities;

//TODO Improve this code in a way that makes XSS and SQL-Injection impossible
//TODO or write your own code for new types of injections
/*
 * Die PENTest-Klasse dient zum ausprobieren von SQL-Injection und persistentem XSS.
 *
 * @author Martin Harrer <martin.harrer@fh-hagenberg.at>
 * @package OnlineShop
 * @version 2.0.2
 */
final class PenTest extends AbstractNormForm
{
    /**
     * Constants for a HTML attribute in <input name='ptype' id='ptype' ... >, <label for='ptype' ... >
     * --> $_POST[self::PTYPE]
     */
    const ID_PEN_TEST = "id_pen_test";
    const EMAIL = "email";
    const PASSWORD = "password";
    const ACTIVE = "active";
    const ROLE = "role";
    const PT_VARCHAR1 = "pt_varchar1";
    const PT_VARCHAR2 = "pt_varchar2";
    const PT_INT = "pt_int";
    const PT_DECIMAL = "pt_decimal";

    /**
     * @var string $dbAccess  Database handler for access to database
     */
    private $dbAccess;

    /**
     * PENTest Constructor.
     *
     * Calls constructor of class AbstractNormForm.
     * Creates a database handler for the database connection.
     *
     * @param View $defaultView Holds the initial @View object used for displaying the form.
     *
     * @throws DatabaseException
     */
    public function __construct(View $defaultView)
    {
        parent::__construct($defaultView);
        $this->dbAccess = new DBAccess(DSN, DB_USER, DB_PWD, DB_NAMES, DB_COLLATION);
        $this->currentView->setParameter(new GenericParameter("pageArray", $this->fillpageArray()));
    }

    /**
     * Validates the user input
     *
     * email and password are required fields.
     * The combination of email + password is checked against database in @see Login::authenitcateUser()
     * Error messages are stored in the array $errorMessages[].
     *
     * @return bool true, if $errorMessages is empty, else false
     */
    protected function isValid(): bool
    {
        if(isset($_POST['login'])) {
            if (!$this->authenticateUser()) {
                $this->errorMessages['login'] = "Either email or password are wrong";
            };
        }
        $this->currentView->setParameter(new GenericParameter("errorMessages", $this->errorMessages));
        return (count($this->errorMessages) === 0);
    }

    /**
     * The buttons "AddToCart" are enclosed by a for using the method POST instead of using hyperlinks with GET.
     * In practice it depends on the chosen shop system, which implementation is used for the order buttons.
     * We use POST, because AbstractNormForm is implemented for this case.
     *
     * Shop::addToCart() stores the chosen product in the table onlineshop.cart.
     * On success an appropriate message is set in $this->statusMessage and sent to the template(setParameter).
     *
     * @throws DatabaseException
     */
    protected function business(): void
    {
        if (isset($_POST['add'])) {
            $this->addPENtestRow();
            $this->statusMessage = "Product Category added";
            $this->currentView->setParameter(new GenericParameter("statusMessage", $this->statusMessage));
            $this->currentView->setParameter(new GenericParameter("pageArray", $this->fillpageArray()));
            $this->currentView->setParameter(new PostParameter(PENTest::ID_PEN_TEST, true));
        } elseif (isset($_POST['select'])) {
            $this->currentView->setParameter(new GenericParameter("pageArray", $this->fillpageArray()));
        } else {
            // stay on site for demonstration purpose --> do nothing
            null;
        }
    }

    /**
     * Validiert email und password
     *
     * Versuchen sie ein Statement zu schreiben, das sich angreifen lässt und stellen sie es dann so um,
     * dass der Angriff nicht mehr funktioniert.
     *
     * @return bool true, wenn email+password einem Datensatz in onlineshop.user entsprechen. false,
     * wenn das nicht der Fall ist.
     * @throws DatabaseException
     */
    private function authenticateUser()
    {
        $email=$_POST[self::EMAIL];
        $password=$_POST[self::PASSWORD];
        $query = <<<SQL
                 SELECT idpentest
                 FROM pentest 
                 WHERE email='$email' 
                 AND password='$password'
SQL;
        $this->dbAccess->prepareQuery($query);
        $this->dbAccess->executeStmt();
        $rows = $this->dbAccess->fetchResultset();
        if (count($rows) >= 0) {
            $_SESSION['iduser']=1;
            $_SESSION[IS_LOGGED_IN] = Utilities::generateLoginHash();
            $_SESSION['first_name']="John";
            $_SESSION['last_name']="Doe";
            return true;
        } else {
            return false;
        }
    }

    /**
     * Returns an array with all pentest entries.
     *
     * The offset for the LIMIT clause is set in @see Shop::setPaginationParameters().
     * The row count of the LIMIT clause is defined by the constant DISPLAY.
     *
     * @return array result set of database query
     * @throws DatabaseException
     */
    private function fillpageArray()
    {
        isset($_POST[self::ID_PEN_TEST]) ? $pentest=$_POST[self::ID_PEN_TEST] : $pentest=1;
        $query = <<<SQL
                 SELECT idpentest, email, password, active, role, pt_varchar1, pt_varchar2, pt_int, pt_decimal 
                 FROM pentest 
                 WHERE idpentest = '$pentest'
SQL;
        $this->dbAccess->prepareQuery($query);
        $this->dbAccess->executeStmt();
        return $this->dbAccess->fetchResultset();
    }

    /**
     * Versuchen sie ein Statement zu schreiben, das sich angreifen lässt und stellen sie es dann so um,
     * dass der Angriff nicht mehr funktioniert.
     *
     * @throws DatabaseException
     */
    private function addPENtestRow()
    {
        $id_pen_test=$_POST[self::ID_PEN_TEST];
        $email=$_POST[self::EMAIL];
        $password=$_POST[self::PASSWORD];
        $active=$_POST[self::ACTIVE];
        $role=$_POST[self::ROLE];
        $pt_varchar1=$_POST[self::PT_VARCHAR1];
        $pt_varchar2=$_POST[self::PT_VARCHAR2];
        $pt_int=$_POST[self::PT_INT];
        $pt_decimal=$_POST[self::PT_DECIMAL];
        $query = <<<SQL
                 INSERT INTO pentest SET idpentest = '$id_pen_test',
                                         email = '$email',
                                         password = '$password',
                                         active = '$active',
                                         role = '$role',
                                         pt_varchar1 = '$pt_varchar1',
                                         pt_varchar2 = '$pt_varchar2',
                                         pt_int = '$pt_int',
                                         pt_decimal = '$pt_decimal'
SQL;
        $this->dbAccess->prepareQuery($query);
        $this->dbAccess->executeStmt();
    }
}
